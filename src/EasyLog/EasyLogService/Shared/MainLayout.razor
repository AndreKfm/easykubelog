@page "/mainlayout"
@inherits LayoutComponentBase


<div class="main">
    <div class="mt-3 ml-3 mr-3 mb-4 border rounded shadow bg-primary" name="mainHeader" style="">
        <h1 style="text-align: center">Easy Kube Log 0.0.9</h1>
    </div>
    <div class="" style="">
        <div class="m-3">
            <EasyLogService.Components.SearchField @ref="SearchField" />
        </div>
        <div class="m-3 defpadding  ">Found: @numEntries</div>
        <div class="m-3 border bg-light" name="MainList" style="position:absolute; width:auto; right:0; left:0; height:auto; top:180px; bottom:0; overflow:auto; box-sizing:border-box">
            <EasyLogService.Components.List @ref="_mainList" />
        </div>
    </div>
</div>



@using EasyLogService.Commands;
@using LogEntries;
@using Microsoft.Extensions.Configuration;
@using System.Threading;
@inject ISearchCommand  _searchCommand;


@code
{
    int numEntries = 0;





    Components.SearchField _searchField;

    protected override void OnInitialized()
    {
    }

    Components.SearchField SearchField
    {
        get
        {
            return _searchField;
        }

        set
        {
            _searchField = value;
            InitSearchField();
        }
    }
    EasyLogService.Components.List _mainList;

    void Completed(KubernetesLogEntry[] logEntries)
    {
        List<EasyLogService.Components.ListElement> list = new List<EasyLogService.Components.ListElement>();

        foreach (var queryResult in logEntries)
        {
            var e = new EasyLogService.Components.ListElement();
            e.Set(queryResult.Time, queryResult.Line, queryResult.Stream, queryResult.Container);
            list.Add(e);
        }
        _mainList.Set(list, Refresh.ImmediatelyRefresh);
        numEntries = list.Count;
        base.InvokeAsync(StateHasChanged);

    }

    void EnableSpinner()
    {
        Interlocked.Increment(ref _spinnerCounter);
        _searchField.DisplaySpinningSearch(true);
    }

    void DisableSpinner()
    {
        var spinnerCount = Interlocked.Decrement(ref _spinnerCounter);
        if (spinnerCount <= 0)
        {
            if (spinnerCount < 0)
                _spinnerCounter = 0; // Should not happen - but to play it safe if something going wrong the recover from that
            _searchField.DisplaySpinningSearch(false);
        }
    }


    int _spinnerCounter = 0;

    void InitSearchField()
    {
        _searchField.OnSearchQueryChange = (query, max, from, to) =>
        {
            EnableSpinner();
            Send(query, max, from, to, (result) => { DisableSpinner(); Completed(result); });
        };
    }

    bool Send(string query, int max, DateTimeOffset from, DateTimeOffset to, Action<KubernetesLogEntry[]> completed)
    {
        var t = Task.Run(() => _searchCommand.Search(new SearchRequest(query, max, from, to), completed));
        return true;
    }

}