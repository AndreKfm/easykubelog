@page "/mainlayout"
@inherits LayoutComponentBase


<div class="main" >
    <div class="mt-3 ml-3 mr-3 mb-4 border rounded shadow bg-primary position-static" name="mainHeader" style=""><h1 style="text-align: center">Easy Log</h1></div>
    <div class="" style="">
        <div class="m-3" style="height:30px">
            <EasyLogService.Components.SearchField @ref="SearchField" />
        </div>
        <div class="m-3 defpadding  ">Entries: @numEntries</div>
        <div class="m-3 border bg-light" name="MainList">
            <EasyLogService.Components.List @ref="_mainList" />
        </div>
    </div>
</div>

@using EasyLogService.Commands;
@using EasyLogService.Services.CentralLogService;
@using Microsoft.Extensions.Configuration;
@inject ISearchCommand  _searchCommand;
@inject IConfiguration  _configuration;


@code
{
    int numEntries = 0;




    int _maxResultLines = 0; // Specifies how many results in log lines will be returned by each query

    EasyLogService.Components.SearchField searchField;

    protected override void OnInitialized()
    {
        _maxResultLines = _configuration.GetValue<int>("MaxLogQueryResultLines");
    }

    EasyLogService.Components.SearchField SearchField
    {
        get
        {
            return searchField;
        }

        set
        {
            searchField = value;
            InitSearchField();
        }
    }
    EasyLogService.Components.List _mainList;

    void Completed(KubernetesLogEntry[] logEntries)
    {
        List<EasyLogService.Components.ListElement> list = new List<EasyLogService.Components.ListElement>();

        foreach (var queryResult in logEntries)
        {
            var e = new EasyLogService.Components.ListElement();

            e.Set(queryResult.Time, queryResult.Log, queryResult.Stream);
            list.Add(e);
        }
        _mainList.Set(list, Refresh.ImmediatelyRefresh);
        numEntries = list.Count;
        base.InvokeAsync(StateHasChanged);

    }

    void InitSearchField()
    {
        searchField.OnSearchQueryChange = (query) =>
        {
            Send(query, (query) => Completed(query));
        };
    }

    bool Send(string query, Action<KubernetesLogEntry[]> completed)
    {
        var t = Task.Run(() => _searchCommand.Search(new SearchRequest(query, _maxResultLines), completed));
        return true;
    }

}