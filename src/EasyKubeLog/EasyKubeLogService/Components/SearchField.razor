@*@page "/searchfield"*@

<style>
    .search-margin { margin-right: 1.5rem; }
    .button-background { background: rgba(200, 200, 200, 0.9); border: 0; align-self: center}
    .scaled { margin-top: 0.5rem; transform: scale(0.8); }
</style>

@* ReSharper disable UnknownCssClass *@

<div class="input-group defpadding" style="align-self: center">
    <div class="input-group-prepend search-margin">
        @*<span class="input-group-text">Search</span>*@
        <button class="button-background" @onclick="ButtonSearchOrAbort" style="height: 49%; align-self: center; background: @ButtonBackground">@ButtonContent</button>
        <div class="d-flex justify-content-center align-items-center m-2" style="@(Style)">
            <div class="spinner-grow spinner-grow-sm" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <MatTextField class="button-background scaled" TValue="string" Label="Search For" @bind-Value="@_text" @onkeyup="TextChanged"  ></MatTextField>
    </div>

    <div class="input-group-prepend search-margin" style="align-self: center">
        <span class="input-group-text button-background mr-1">Max</span>
        <input class="form-control button-background" type="number" aria-label="Search text" @bind-value="MaxElements"  @onkeyup="TextChanged" style="max-width:7rem" />
    </div>

    <SearchFieldDateTime  @ref="FromDateTime" Name="From" />
    <SearchFieldDateTime  @ref="ToDateTime" Name="To" />

    @*<div class="input-group-prepend search-margin" style="align-items:center;">
            <input type="checkbox" aria-label="Enable date from" @bind-value="_enabledDateFrom" class="form-check" style="transform: scale(2.9);" />
            <span class="input-group-text" style="padding-left: 1.0rem;">From</span>
            <input type="datetime-local" aria-label="Search date from" style="@(_style)" @bind-value="DateFrom" disabled="@(!EnabledDateFrom)" @bind-value:event="oninput" @onkeyup="CheckCurrentSearchTextAndExecuteIfDifferentToLast" class="form-control" />
        </div>*@
</div>

@using Microsoft.Extensions.Configuration;
@using System.Threading
@using System.Runtime.InteropServices.WindowsRuntime

@inject IConfiguration  _configuration;

@code {

    const int MaxElementsHighest = 2000;

    private SearchFieldDateTime _fromDateTime;
    private SearchFieldDateTime _toDateTime;
    // ReSharper disable once UnusedMember.Local
    private SearchFieldDateTime FromDateTime { get => _fromDateTime;
        set { _fromDateTime = value; TextChanged(); } }
    // ReSharper disable once UnusedMember.Local
    private SearchFieldDateTime ToDateTime { get => _toDateTime;
        set { _toDateTime = value; TextChanged(); } }

    // ReSharper disable once FieldCanBeMadeReadOnly.Local
    private string _text = String.Empty;
    private int _maxElements = 100;

    public bool Searching { get; set; }

    static string GetSearchingStyle(bool state)
    {
        return state ? "color: green" : "visibility: hidden";
    }

    public string Style { get; set; } = GetSearchingStyle(false);

    const int DefaultDelay = 100;
    Task _delayTask = Task.CompletedTask;
    System.Threading.CancellationTokenSource _tokenSource;

    public int MaxElements
    {
        get => _maxElements;
        set => _maxElements = value < MaxElementsHighest ? value : MaxElementsHighest;
    }

    public void DisplaySpinningSearch(bool state)
    {
        Searching = state;
        Style = GetSearchingStyle(state);
        InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        _maxElements = _configuration.GetValue<int>("MaxLogQueryResultLines");
    }

    string _lastQuery = String.Empty;
    string _currentQuery = String.Empty;


    string ButtonContent => (_buttonStateCurrentlyExecutingSearch == false) ? "Search" : "Abort";

    private bool _buttonStateCurrentlyExecutingSearch = false;

    string ButtonBackground => (_buttonStateCurrentlyExecutingSearch == true) ? "rgba(255, 150, 150, 0.9)" : "rgba(150, 255, 150, 0.9)";

    private void SetDefaultState()
    {
        _buttonStateCurrentlyExecutingSearch = false;
        InvokeAsync(StateHasChanged);
    }

    private void SetSearchIsExecutingNowState()
    {
        _buttonStateCurrentlyExecutingSearch = true;
        InvokeAsync(StateHasChanged);
    }

    private void ButtonSearchOrAbort()
    {
        Console.WriteLine("Button pressed");

        if (_buttonStateCurrentlyExecutingSearch)
            AbortCurrentSearch();

        InternalCheckCurrentSearchTextAndExecuteIfDifferentToLastDelayedAndThrottled(DefaultDelay);
    }

    private void AbortCurrentSearch()
    {
        AbortInCaseOfRunning();
        SetDefaultState();
    }

    private void ExecuteCurrentSearch()
    {
        SetSearchIsExecutingNowState();
        InternalCheckCurrentSearchTextAndExecuteIfDifferentToLastDelayedAndThrottled(DefaultDelay);
    }

    private void TextChanged()
    {
        Console.WriteLine($"TextChanged: {_lastQuery} - {_currentQuery}");
        ExecuteCurrentSearch();
    }

    private bool CheckCurrentSearchTextAndExecuteIfDifferentToLast()
    {
        Console.WriteLine("CheckCurrentSearchTextAndExecuteIfDifferentToLast - 1");
        lock (_lastQuery)
        {
            Console.WriteLine($"CheckCurrentSearchTextAndExecuteIfDifferentToLast - 2:: {_text}");
            string currentQuery = _text + _maxElements.ToString() + _fromDateTime.Date.ToString() + _toDateTime.Date.ToString();
            if (currentQuery == _lastQuery)
                return false;
            _currentQuery = currentQuery;
            Console.WriteLine("CheckCurrentSearchTextAndExecuteIfDifferentToLast - 3");
        }
        InvokeAsync(() =>
            OnSearchQueryChange(_text, _maxElements, _fromDateTime.Date, _toDateTime.Date));
        StateHasChanged();
        return true;
    }

    void AbortInCaseOfRunning()
    {
        _tokenSource?.Cancel();
        _delayTask?.Wait();
        _tokenSource?.Dispose();
        _tokenSource = null;
        _delayTask = null;
    }


    private void KeyPressed()
    {
        InternalCheckCurrentSearchTextAndExecuteIfDifferentToLastDelayedAndThrottled(DefaultDelay);
    }

    // Method will be called on each keystroke but it won't call immediately
    // CheckCurrentSearchTextAndExecuteIfDifferentToLast but wait for additional keystrokes to come in
    private void CheckCurrentSearchTextAndExecuteIfDifferentToLastDelayedAndThrottled()
    {
        InternalCheckCurrentSearchTextAndExecuteIfDifferentToLastDelayedAndThrottled(DefaultDelay);
    }

    private void InternalCheckCurrentSearchTextAndExecuteIfDifferentToLastDelayedAndThrottled(int delay)
    {
        AbortInCaseOfRunning();
        _tokenSource = new System.Threading.CancellationTokenSource();
        var localToken = _tokenSource.Token;
        InvokeAsync(SetDefaultState);

        InternalExecuteSearchAsync(delay, localToken);

    }

    private void InternalExecuteSearchAsync(int delay, CancellationToken localToken)
    {
        _delayTask = Task.Run(async () =>
        {
            try
            {
                var token = localToken;
                await Task.Delay(delay, token);
                _ = InvokeAsync(() =>
                {
                    DisplaySpinningSearch(true);
                    InvokeAsync(SetSearchIsExecutingNowState);
                    if (!CheckCurrentSearchTextAndExecuteIfDifferentToLast())
                    {
                        DisplaySpinningSearch(false);
                        SetDefaultState();
                    }
                });
            }
            catch (Exception)
            {
                // ignored
            }

            lock (_lastQuery)
            {
                _lastQuery = _currentQuery;
                Console.WriteLine($"QUERY SET TO LAST: {_lastQuery}")
                ;
            }
            _ = InvokeAsync(SetDefaultState); // Ignore task here - otherwise UI is blocked
        }, _tokenSource.Token);
    }

    public Action<string, int, DateTimeOffset, DateTimeOffset> OnSearchQueryChange;
}