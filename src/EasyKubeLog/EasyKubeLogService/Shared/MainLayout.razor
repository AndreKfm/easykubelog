@page "/mainlayout"
@inherits LayoutComponentBase

@* ReSharper disable UnknownCssClass *@
<div class="main" style="">

    <div class="mb-3 pt-3 text-light" name="mainHeader">
        <h2 class="ml-3" style="text-align: left; color: rgba(200, 200, 200, 0.9)">Easy Kube Log 0.0.11</h2>
    </div>
    <div>
        <div class="m-3">
            <EasyKubeLogService.Components.SearchField @ref="SearchField"/>
        </div>
        <div class="mt-3 mb-3 pl-3 " style="color: rgba(200, 200, 200, 0.9)">Found: @_numEntries</div>
        <MatDivider style="background: rgba(200, 200, 200, 0.9)"></MatDivider>
        <div class="ml-2 mr-2" name="MainList" style="position: absolute; width: auto; right: 0; left: 0; height: auto; top: 200px; bottom: 0; overflow: auto; box-sizing: border-box">
            <EasyKubeLogService.Components.List @ref="_mainList" />
        </div>
    </div>
</div>

@using LogEntries;
@using System.Threading;
@using EasyKubeLogService.Components.Commands
@using Microsoft.Net.Http.Headers
@inject ISearchCommand  _searchCommand;

@code
{
    int _numEntries;
    SearchField _searchField;

    protected override void OnInitialized()
    {
    }

    // ReSharper disable once UnusedMember.Local
    SearchField SearchField
    {
        get => _searchField;

        set
        {
            _searchField = value;
            InitSearchField();
        }
    }
    // ReSharper disable once FieldCanBeMadeReadOnly.Local
    private List _mainList = new List();

    void Completed(KubernetesLogEntry[] logEntries)
    {
        List<ListElement> list = new List<ListElement>();

        foreach (var queryResult in logEntries)
        {
            var e = new ListElement();
            e.Set(queryResult.Time, queryResult.Line, queryResult.Stream, queryResult.Container);
            list.Add(e);
        }
        _mainList.Set(list, Refresh.ImmediatelyRefresh);
        _numEntries = list.Count;
        InvokeAsync(StateHasChanged);

    }

    void EnableSpinner()
    {
        Interlocked.Increment(ref _spinnerCounter);
        _searchField.DisplaySpinningSearch(true);
    }

    void DisableSpinner()
    {
        var spinnerCount = Interlocked.Decrement(ref _spinnerCounter);
        if (spinnerCount <= 0)
        {
            if (spinnerCount < 0)
                _spinnerCounter = 0; // Should not happen - but to play it safe if something going wrong the recover from that
            _searchField.DisplaySpinningSearch(false);
        }
    }

    int _spinnerCounter;

    void InitSearchField()
    {
        _searchField.OnSearchQueryChange = (query, max, from, to) =>
        {
            EnableSpinner();
    // ReSharper disable once RedundantVerbatimPrefix
            Send(query, max, @from, to, (result) => { DisableSpinner(); Completed(result); });
        };
    }

    // ReSharper disable once RedundantVerbatimPrefix
    void Send(string query, int max, DateTimeOffset @from, DateTimeOffset to, Action<KubernetesLogEntry[]> completed)
    {
        Task.Run(() => _searchCommand.Search(new SearchRequest(query, max, from, to), completed)).Wait();
    }

}